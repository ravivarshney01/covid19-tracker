{"version":3,"sources":["components/Box.js","components/LineGraph.js","util.js","components/Map.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["Box","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","sortData","sortedData","sort","b","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","showDataOnMap","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","countries","TileLayer","url","attribution","Table","i","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33b1f96e.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\nimport React from 'react'\nimport '../styles/box.css'\n\nconst Box = ({ title, cases, total, active, isRed, ...props }) => {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && 'infoBox--selected'} ${isRed &&\n        'infoBox--red'}`}\n    >\n      <CardContent>\n        <Typography color='textSecondary' gutterBottom>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && 'infoBox__cases--green'}`}>\n          {cases}\n        </h2>\n\n        <Typography className='infoBox__total' color='textSecondary'>\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default Box\n","import React, { useEffect, useState } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport numeral from 'numeral'\n\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: 'index',\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format('+0,0')\n      }\n    }\n  },\n  scales: {\n    xAxes: [\n      {\n        type: 'time',\n        time: {\n          format: 'MM/DD/YY',\n          tooltipFormat: 'll'\n        }\n      }\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format('0a')\n          }\n        }\n      }\n    ]\n  }\n}\n\nconst buildChartData = (data, casesType) => {\n  let chartData = []\n  let lastDataPoint\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      }\n      chartData.push(newDataPoint)\n    }\n    lastDataPoint = data[casesType][date]\n  }\n  return chartData\n}\nconst LineGraph = ({ casesType }) => {\n  const [data, setData] = useState({})\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n        .then(response => {\n          return response.json()\n        })\n        .then(data => {\n          let chartData = buildChartData(data, casesType)\n          setData(chartData)\n        })\n    }\n\n    fetchData()\n  }, [casesType])\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: 'rgba(204, 16, 52, 0.5)',\n                borderColor: '#CC1034',\n                data: data\n              }\n            ]\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default LineGraph\n","import React from 'react'\nimport numeral from 'numeral'\nimport { Circle, Popup } from 'react-leaflet'\n\nexport const sortData = data => {\n  let sortedData = [...data]\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1\n    } else {\n      return 1\n    }\n  })\n  return sortedData\n}\n\nconst casesTypeColors = {\n  cases: {\n    hex: '#CC1034',\n    rgb: 'rgb(204, 16, 52)',\n    half_op: 'rgba(204, 16, 52, 0.5)',\n    multiplier: 400\n  },\n  recovered: {\n    hex: '#7dd71d',\n    rgb: 'rgb(125, 215, 29)',\n    half_op: 'rgba(125, 215, 29, 0.5)',\n    multiplier: 400\n  },\n  deaths: {\n    hex: '#fb4443',\n    rgb: 'rgb(251, 68, 67)',\n    half_op: 'rgba(251, 68, 67, 0.5)',\n    multiplier: 2000\n  }\n}\n\nexport const prettyPrintStat = stat =>\n  stat ? `+${numeral(stat).format('0.0a')}` : '+0'\n\nexport const showDataOnMap = (data, casesType = 'cases') =>\n  data.map((country, index) => (\n    <Circle\n      key={index}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className='info-container'>\n          <div\n            className='info-flag'\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className='info-name'>{country.country}</div>\n          <div className='info-confirmed'>\n            Cases: {numeral(country.cases).format('0,0')}\n          </div>\n          <div className='info-recovered'>\n            Recovered: {numeral(country.recovered).format('0,0')}\n          </div>\n          <div className='info-deaths'>\n            Deaths: {numeral(country.deaths).format('0,0')}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ))\n","import React from 'react'\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet'\nimport '../styles/map.css'\nimport { showDataOnMap } from '../util'\n\nconst Map = ({ center, zoom, countries, casesType }) => {\n  return (\n    <div className='map'>\n      <LeafletMap zoom={zoom} center={center}>\n        <TileLayer\n          url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  )\n}\n\nexport default Map\n","import React from 'react'\nimport '../styles/table.css'\nimport numeral from 'numeral'\n\nconst Table = ({ countries }) => {\n  return (\n    <div className='table'>\n      <table>\n        <tbody>\n          {countries.map((country, i) => (\n            <tr key={i}>\n              <td>{country.country}</td>\n              <td>\n                <strong>{numeral(country.cases).format('0,0')}</strong>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Table\n","import {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select\n} from '@material-ui/core'\nimport React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Box from './components/Box'\nimport LineGraph from './components/LineGraph'\nimport Map from './components/Map'\nimport Table from './components/Table'\nimport { sortData, prettyPrintStat } from './util'\nimport numeral from 'numeral'\nimport 'leaflet/dist/leaflet.css'\n\nfunction App () {\n  const [countries, setCountries] = useState([])\n  const [country, setCountry] = useState('worldwide')\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [casesType, setCasesType] = useState('cases')\n  const [mapCenter, setMapCenter] = useState([20, 77])\n  const [mapZoom, setMapZoom] = useState(3)\n  const [mapCountries, setMapCountries] = useState([])\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data)\n      })\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch('https://disease.sh/v3/covid-19/countries')\n        .then(response => response.json())\n        .then(data => {\n          const countries = data.map(country => ({\n            name: country.country,\n            value: country.countryInfo.iso2\n          }))\n          const sortedData = sortData(data)\n          setCountries(countries)\n          setTableData(sortedData)\n          setMapCountries(data)\n        })\n    }\n\n    getCountriesData()\n  }, [])\n\n  const onCountryChange = async event => {\n    const countryCode = event.target.value\n\n    const url =\n      countryCode === 'worldwide'\n        ? 'https://disease.sh/v3/covid-19/all'\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode)\n        setCountryInfo(data)\n        if (countryCode === 'worldwide') {\n          setMapCenter([20, 77])\n          setMapZoom(3)\n        } else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n          setMapZoom(4)\n        }\n      })\n  }\n\n  return (\n    <div className='app'>\n      <div className='app__left'>\n        <div className='app__header'>\n          <h1>COVID19 TRACKER</h1>\n          <FormControl className='app__dropdown'>\n            <Select\n              variant='outlined'\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              {countries.map((country, index) => (\n                <MenuItem key={index} value={country.value}>\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className='app__stats'>\n          <Box\n            onClick={e => setCasesType('cases')}\n            title='Coronavirus Cases'\n            isRed\n            active={casesType === 'cases'}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format('0.0a')}\n          />\n          <Box\n            onClick={e => setCasesType('recovered')}\n            title='Recovered'\n            active={casesType === 'recovered'}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format('0.0a')}\n          />\n          <Box\n            onClick={e => setCasesType('deaths')}\n            title='Deaths'\n            isRed\n            active={casesType === 'deaths'}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format('0.0a')}\n          />\n        </div>\n\n        <Map\n          center={mapCenter}\n          zoom={mapZoom}\n          countries={mapCountries}\n          casesType={casesType}\n        />\n      </div>\n      <Card className='app__right'>\n        <CardContent>\n          <h3>Live cases</h3>\n          <Table countries={tableData} />\n          <h3>Worldwide new {casesType}</h3>\n          <LineGraph casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}